#!/bin/bash

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -u

if [[ "$(bazel --version)" == 'bazel 4'.* ]]; then
  bazel run -- @com_github_bazelbuild_buildtools//buildifier \
    --mode=check --lint=warn -r -- "${PWD}" || exit
fi

# We don’t want any Go rules in the public packages, as our users would have to
# depend on the Go rules then as well.
echo 'Looking for unwanted Go targets in public packages'
grep --fixed-strings --regexp='@io_bazel_rules_go' \
  --line-number --context=3 --color=auto --recursive -- elisp emacs
# Check explicitly for exit status 1, to detect grep errors.
if (($? != 1)); then
  echo 'Unwanted Go targets found'
  exit 1
fi

versions=(26.{1,2,3} 27.{1,2})
readonly versions

case "$(uname -sm)" in
  'Darwin arm64')
    unsupported=(26.{1,2,3} 27.1) ;;
  Darwin*)
    unsupported=(26.{1,2,3}) ;;
  Linux*)
    unsupported=() ;;
  *)
    echo 'unsupported platform' >&2
    exit 1 ;;
esac

is_supported() {
  for version in "${unsupported[@]}"; do
    [[ "$1" == "${version}" ]] && return 1
  done
}

exclude=()
for version in "${unsupported[@]}"; do
  # Explicitly exclude unsupported binaries.  We also mark them as incompatible
  # using “target_compatible_with”, but that requires Bazel 4.
  exclude+=("-//emacs:emacs_${version}")
done

run() {
  (set -x; bazel test --test_output=errors "$@" -- //... "${exclude[@]}")
  echo
}

# Test default toolchain.
run || exit

# Test versioned toolchains.
for version in "${versions[@]}"; do
  if is_supported "${version}"; then
    toolchain="//elisp:emacs_${version}_toolchain"
    run --extra_toolchains="${toolchain}" || exit
  fi
done
