# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Bzlmod module definition for rules_elisp."""

module(name = "phst_rules_elisp")

# Non-development module dependencies
bazel_dep(name = "platforms", version = "0.0.8")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "rules_license", version = "0.0.7")
bazel_dep(name = "rules_python", version = "0.27.1")
bazel_dep(name = "abseil-cpp", version = "20230802.0", repo_name = "com_google_absl")
bazel_dep(name = "protobuf", version = "23.1", repo_name = "com_google_protobuf")
bazel_dep(name = "upb", version = "0.0.0-20230516-61a97ef")

# Necessary patch for μpb; to be removed once
# https://github.com/protocolbuffers/protobuf/issues/13741 and
# https://github.com/protocolbuffers/protobuf/issues/14564 are fixed.
single_version_override(
    module_name = "upb",
    patches = ["//:upb.patch"],
)

# Development-only module dependencies
bazel_dep(name = "stardoc", version = "0.6.2", dev_dependency = True, repo_name = "io_bazel_stardoc")
bazel_dep(name = "googletest", version = "1.14.0", dev_dependency = True, repo_name = "com_google_googletest")
bazel_dep(name = "rules_go", version = "0.44.0", dev_dependency = True, repo_name = "io_bazel_rules_go")
bazel_dep(name = "abseil-py", version = "1.4.0", dev_dependency = True, repo_name = "io_abseil_py")
bazel_dep(name = "gazelle", version = "0.35.0", dev_dependency = True, repo_name = "bazel_gazelle")

# Bring in the local_config_cc repository.  It’s needed for
# phst_rules_elisp_toolchains on Windows.
cc_configure = use_extension("@bazel_tools//tools/cpp:cc_configure.bzl", "cc_configure_extension")
use_repo(cc_configure, "local_config_cc")

# Non-module dependencies
non_module_deps = use_extension("//private:non_module_deps.bzl", "non_module_deps")
use_repo(non_module_deps, "gnu_emacs_28.1")
use_repo(non_module_deps, "gnu_emacs_28.2")
use_repo(non_module_deps, "gnu_emacs_29.1")
use_repo(non_module_deps, "phst_rules_elisp_toolchains")

non_module_dev_deps = use_extension("//private:non_module_deps.bzl", "non_module_dev_deps", dev_dependency = True)
use_repo(non_module_dev_deps, "junit_xsd", "phst_rules_elisp_bazel_version")

# Local toolchains
register_toolchains("@phst_rules_elisp//elisp:hermetic_toolchain")

# Python-specific dependencies
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.10",
)
use_repo(python, hermetic_python = "python_3_10")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.10",
    requirements_darwin = "@//dev:macos-requirements.txt",
    requirements_linux = "@//dev:linux-requirements.txt",
    requirements_windows = "@//dev:windows-requirements.txt",
)
use_repo(pip, pip_deps = "pip")

# Go-specific dependencies
go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk", dev_dependency = True)
go_sdk.nogo(nogo = "//dev:nogo")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps", dev_dependency = True)
go_deps.module(
    path = "github.com/bazelbuild/buildtools",
    sum = "h1:2Gc2Q6hVR1SJ8bBI9Ybzoggp8u/ED2WkM4MfvEIn9+c=",
    version = "v0.0.0-20231115204819-d4c9dccdfbb1",
)
go_deps.module(
    path = "github.com/google/addlicense",
    sum = "h1:jpVf9qPbU8rz5MxKo7d+RMcNHkqxi4YJi/laauX4aAE=",
    version = "v1.1.1",
)
go_deps.module(
    path = "github.com/google/go-cmp",
    sum = "h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=",
    version = "v0.6.0",
)
use_repo(
    go_deps,
    "com_github_bazelbuild_buildtools",
    "com_github_google_addlicense",
    "com_github_google_go_cmp",
)

# Tools for development
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "eca42c63700fccdc49cf58177e0a96f0f6075a68",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "phst_update_workspace_snippets", dev_dependency = True)
git_override(
    module_name = "phst_update_workspace_snippets",
    commit = "fba2b14f5a8280f65a313b9037ccecb60e33f238",
    remote = "https://github.com/phst/update-workspace-snippets.git",
)

bazel_dep(name = "phst_bazelcov", dev_dependency = True)
git_override(
    module_name = "phst_bazelcov",
    commit = "012a9b2b7211b37e886403ba284b1b09e6665e89",
    remote = "https://github.com/phst/bazelcov.git",
)

# We want to test the external example without adding its repository to the
# registry.  So we use override the dependency immediately locally.
bazel_dep(name = "phst_rules_elisp_example", dev_dependency = True, repo_name = "example")
local_path_override(
    module_name = "phst_rules_elisp_example",
    path = "examples/ext",
)
