# Copyright 2023, 2024, 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Bzlmod module definition for rules_elisp."""

module(
    name = "phst_rules_elisp",
    bazel_compatibility = [">=7.2.1"],
)

# Non-development module dependencies
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.1.0")
bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "abseil-cpp", version = "20240722.0.bcr.2")
bazel_dep(name = "protobuf", version = "29.2")

# Work around https://github.com/bazelbuild/bazel/issues/24426.  See
# https://github.com/bazelbuild/bazel-central-registry/pull/3320#issuecomment-2546030208.
# FIXME: Remove once fixed upstream in googletest and abseil-cpp.
bazel_dep(name = "re2", version = "2024-07-02.bcr.1")

# Development-only module dependencies
bazel_dep(name = "stardoc", version = "0.7.2", dev_dependency = True)
bazel_dep(name = "rules_go", version = "0.51.0", dev_dependency = True)
bazel_dep(name = "abseil-py", version = "2.1.0", dev_dependency = True)
bazel_dep(name = "gazelle", version = "0.40.0", dev_dependency = True)

# Bring in the local_config_cc repository.  Itâ€™s needed for
# //emacs:windows_cc_toolchain.
cc_configure = use_extension("@rules_cc//cc:extensions.bzl", "cc_configure_extension")
use_repo(cc_configure, "local_config_cc", "local_config_cc_toolchains")

# Non-module dependencies
deps = use_extension("//private:extensions.bzl", "deps")
use_repo(deps, "local_emacs")
use_repo(deps, "gnu_emacs_28.2")
use_repo(deps, "gnu_emacs_29.4")
use_repo(deps, "gnu_emacs_windows_28.2")
use_repo(deps, "gnu_emacs_windows_29.4")

dev_deps = use_extension("//private:extensions.bzl", "dev_deps", dev_dependency = True)
use_repo(dev_deps, "phst_rules_elisp_dev_deps")

# Local toolchains
register_toolchains("@phst_rules_elisp//elisp:hermetic_toolchain")

# C++-specific dependencies
register_toolchains("@local_config_cc_toolchains//:all")

# Python-specific dependencies
python = use_extension("@rules_python//python/extensions:python.bzl", "python", dev_dependency = True)
python.toolchain(
    configure_coverage_tool = True,
    # Attempt to work around nondeterminism on Windows.  See
    # https://github.com/bazelbuild/rules_python/pull/713 and
    # https://github.com/bazelbuild/rules_python/pull/907.
    ignore_root_user_error = True,
    python_version = "3.10",
)
use_repo(python, hermetic_python = "python_3_10")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip", dev_dependency = True)
pip.parse(
    hub_name = "pip",
    python_version = "3.10",
    requirements_darwin = "//dev:requirements-macos.lock",
    requirements_linux = "//dev:requirements-linux.lock",
    requirements_windows = "//dev:requirements-windows.lock",
)
use_repo(pip, pip_deps = "pip")

# Go-specific dependencies
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk", dev_dependency = True)
go_sdk.nogo(nogo = "//dev:nogo")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps", dev_dependency = True)
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_bazelbuild_buildtools",
    "com_github_google_addlicense",
    "com_github_google_go_cmp",
)

# Tools for development
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True)

# Bogus versions added because of
# https://github.com/renovatebot/renovate/discussions/33421.
# FIXME: Remove them once Renovate issue is fixed.
bazel_dep(name = "hedron_compile_commands", version = "0", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "phst_update_workspace_snippets", version = "0", dev_dependency = True)
git_override(
    module_name = "phst_update_workspace_snippets",
    commit = "bbca2ac76af277c657dab8d437f46681072ad565",
    remote = "https://github.com/phst/update-workspace-snippets.git",
)

bazel_dep(name = "phst_bazelcov", version = "0", dev_dependency = True)
git_override(
    module_name = "phst_bazelcov",
    commit = "6f62bf01e03b1372275914978a3b290f41724e50",
    remote = "https://github.com/phst/bazelcov.git",
)

bazel_dep(name = "phst_merge_bazel_lockfiles", version = "0", dev_dependency = True)
git_override(
    module_name = "phst_merge_bazel_lockfiles",
    commit = "c19a840c15ec123ef64f55895f54c0461a610b2b",
    remote = "https://github.com/phst/merge-bazel-lockfiles.git",
)

# We want to test the external example without adding its repository to the
# registry.  So we override the dependency immediately locally.
bazel_dep(name = "phst_rules_elisp_example", version = "0", dev_dependency = True)
local_path_override(
    module_name = "phst_rules_elisp_example",
    path = "examples/ext",
)
