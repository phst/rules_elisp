# Copyright 2023-2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Bzlmod module definition for rules_elisp."""

module(
    name = "phst_rules_elisp",
    bazel_compatibility = [">=7.2.1"],
)

# Non-development module dependencies
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "bazel_skylib", version = "1.8.2")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.2.10")
bazel_dep(name = "rules_python", version = "1.6.3")
bazel_dep(name = "rules_shell", version = "0.6.1")
bazel_dep(name = "abseil-cpp", version = "20250814.1")
bazel_dep(name = "protobuf", version = "32.1")

# Development-only module dependencies
bazel_dep(name = "stardoc", version = "0.8.0", dev_dependency = True)
bazel_dep(name = "rules_go", version = "0.57.0", dev_dependency = True)
bazel_dep(name = "abseil-py", version = "2.1.0", dev_dependency = True)
bazel_dep(name = "gazelle", version = "0.45.0", dev_dependency = True)
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.8.2", dev_dependency = True)
bazel_dep(name = "bazel_features", version = "1.37.0", dev_dependency = True)
bazel_dep(name = "googletest", version = "1.17.0.bcr.1", dev_dependency = True)

# Bring in the local_config_cc repository.  Itâ€™s needed for
# //emacs:windows_cc_toolchain.
cc_configure = use_extension("@rules_cc//cc:extensions.bzl", "cc_configure_extension")
use_repo(cc_configure, "local_config_cc", "local_config_cc_toolchains")

# Non-module dependencies
emacs_repository = use_repo_rule("//elisp/private:emacs_repository.bzl", "emacs_repository")

emacs_repository(
    name = "gnu_emacs_29",
    integrity = "sha384-1LIwxBtAr9RzK3VJ359OfOh/PN83fyfl7uckmMw+Z0mKabbOOsvy00PhXvm5wJtf",
    mode = "source",
    output = "emacs.tar.xz",
    strip_prefix = "emacs-29.4",
    urls = [
        "https://ftpmirror.gnu.org/emacs/emacs-29.4.tar.xz",
        "https://ftp.gnu.org/gnu/emacs/emacs-29.4.tar.xz",
    ],
)

emacs_repository(
    name = "gnu_emacs_windows_29",
    integrity = "sha384-wu5kKCCMX6BLgSoUfMEUf1gLk4Ua+rWa8mldAeW+Y6q+RXyCmdPZP/XuJPO9uWrt",
    mode = "release",
    output = "emacs.zip",
    strip_prefix = "",
    target_compatible_with = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
    urls = [
        "https://ftpmirror.gnu.org/emacs/windows/emacs-29/emacs-29.4.zip",
        "https://ftp.gnu.org/gnu/emacs/windows/emacs-29/emacs-29.4.zip",
    ],
)

emacs_repository(
    name = "gnu_emacs_30",
    integrity = "sha384-2hDJF2LcSpB7ZTLRyCpYBkXpMs1QVlANlrSPNfU6sUrrs57Q+7QY3Ff7MIYRwNRt",
    mode = "source",
    output = "emacs.tar.xz",
    strip_prefix = "emacs-30.2",
    urls = [
        "https://ftpmirror.gnu.org/emacs/emacs-30.2.tar.xz",
        "https://ftp.gnu.org/gnu/emacs/emacs-30.2.tar.xz",
    ],
)

emacs_repository(
    name = "gnu_emacs_windows_30",
    integrity = "sha384-MeW1g2s6e5UBWMBYEU+FCMeLnZMKaiBo6BWfc4Re/Dy//JBaN7RXRJtzXLq9QTSg",
    mode = "release",
    output = "emacs.zip",
    strip_prefix = "",
    target_compatible_with = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
    urls = [
        "https://ftpmirror.gnu.org/emacs/windows/emacs-30/emacs-30.2.zip",
        "https://ftp.gnu.org/gnu/emacs/windows/emacs-30/emacs-30.2.zip",
    ],
)

local_emacs_repository = use_repo_rule("//elisp/private:local_emacs_repository.bzl", "local_emacs_repository")

local_emacs_repository(name = "local_emacs")

junit_xsd = use_repo_rule("//private:junit_xsd.bzl", "junit_xsd")

junit_xsd(
    name = "junit_xsd",
    dev_dependency = True,
)

# Local toolchains
register_toolchains("//elisp:hermetic_toolchain")

# C++-specific dependencies
bazel_dep(name = "gazelle_cc", version = "0.1.0", dev_dependency = True)

register_toolchains("@local_config_cc_toolchains//:all")

# Python-specific dependencies
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip", dev_dependency = True)
pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_darwin = "//dev:requirements-unix.lock",
    requirements_linux = "//dev:requirements-unix.lock",
    requirements_windows = "//dev:requirements-windows.lock",
)
use_repo(pip, "pip")

# Work around https://github.com/bazel-contrib/rules_python/issues/2762.
# FIXME: Remove once https://github.com/bazel-contrib/rules_python/issues/2762
# is fixed upstream.
single_version_override(
    module_name = "rules_python",
    patches = ["rules_python.patch"],
)

# Go-specific dependencies
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk", dev_dependency = True)
go_sdk.nogo(nogo = "//dev:nogo")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps", dev_dependency = True)
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_bazelbuild_buildtools",
    "com_github_google_go_cmp",
)

# Tools for development
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2", dev_dependency = True, repo_name = "buildifier")
bazel_dep(name = "phst_license_test", version = "0", dev_dependency = True)
git_override(
    module_name = "phst_license_test",
    commit = "223fd1096ad2796ec40d39f73d1a079fbb6cd8fa",
    remote = "https://github.com/phst/license_test.git",
)

# Bogus versions added because of
# https://github.com/renovatebot/renovate/issues/33476.
# FIXME: Remove them once Renovate issue is fixed.
bazel_dep(name = "hedron_compile_commands", version = "0", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "abb61a688167623088f8768cc9264798df6a9d10",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "phst_update_workspace_snippets", version = "0", dev_dependency = True, repo_name = "update-workspace-snippets")
git_override(
    module_name = "phst_update_workspace_snippets",
    commit = "13a49c4712ce47546034a1babee710bfaef125ed",
    remote = "https://github.com/phst/update-workspace-snippets.git",
)

bazel_dep(name = "phst_bazelcov", version = "0", dev_dependency = True, repo_name = "bazelcov")
git_override(
    module_name = "phst_bazelcov",
    commit = "e807105e3a9e883364f8a6ec63a4b054ef3095f6",
    remote = "https://github.com/phst/bazelcov.git",
)

bazel_dep(name = "phst_merge_bazel_lockfiles", version = "0", dev_dependency = True)
git_override(
    module_name = "phst_merge_bazel_lockfiles",
    commit = "cefd4c10e189c2b322c3297634bb0ed9051f0a56",
    remote = "https://github.com/phst/merge-bazel-lockfiles.git",
)

bazel_dep(name = "rules_mypy", version = "0.40.0", dev_dependency = True)

types = use_extension("@rules_mypy//mypy:types.bzl", "types", dev_dependency = True)
types.requirements(
    name = "pip_types",
    pip_requirements = "@pip//:requirements.bzl",
    requirements_txt = "//dev:requirements.txt",
)
use_repo(types, "pip_types")

# Local binaries that need to be installed on the host/exec machine.
local_binary = use_repo_rule("//dev:local_binary.bzl", "local_binary")

local_binary(
    name = "makeinfo",
    dev_dependency = True,
    library_visibility = ["//docs:__pkg__"],
    program = "makeinfo",
)

local_binary(
    name = "xmllint",
    dev_dependency = True,
    library_visibility = [],
    program = "xmllint",
)

# We want to test the external example without adding its repository to the
# registry.  So we override the dependency immediately locally.
bazel_dep(name = "phst_rules_elisp_example", version = "0", dev_dependency = True)
local_path_override(
    module_name = "phst_rules_elisp_example",
    path = "examples/ext",
)
