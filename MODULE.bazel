# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Bzlmod module definition for rules_elisp."""

module(
    name = "phst_rules_elisp",
    version = "0",
)

# Non-development module dependencies
bazel_dep(name = "platforms", version = "0.0.7")
bazel_dep(name = "bazel_skylib", version = "1.4.2")
bazel_dep(name = "rules_license", version = "0.0.7")
bazel_dep(name = "rules_python", version = "0.24.0")
bazel_dep(name = "abseil-cpp", version = "20230125.1", repo_name = "com_google_absl")
bazel_dep(name = "protobuf", version = "21.7", repo_name = "com_google_protobuf")
bazel_dep(name = "upb", version = "0.0.0-20220923-a547704")

# Development-only module dependencies
bazel_dep(name = "stardoc", version = "0.6.2", dev_dependency = True, repo_name = "io_bazel_stardoc")
bazel_dep(name = "googletest", version = "1.14.0", dev_dependency = True, repo_name = "com_google_googletest")
bazel_dep(name = "rules_go", version = "0.41.0", dev_dependency = True, repo_name = "io_bazel_rules_go")
bazel_dep(name = "abseil-py", version = "1.4.0", dev_dependency = True, repo_name = "io_abseil_py")
bazel_dep(name = "gazelle", version = "0.29.0", dev_dependency = True, repo_name = "bazel_gazelle")

# Non-module dependencies
non_module_deps = use_extension("//private:non_module_deps.bzl", "non_module_deps")
use_repo(non_module_deps, "gnu_emacs_28.1")
use_repo(non_module_deps, "gnu_emacs_28.2")
use_repo(non_module_deps, "gnu_emacs_29.1")
use_repo(non_module_deps, "phst_rules_elisp_toolchains")
use_repo(non_module_deps, "junit_xsd")
use_repo(non_module_deps, "hedron_compile_commands")

# Local toolchains
register_toolchains("@phst_rules_elisp//elisp:hermetic_toolchain")

# Python-specific dependencies
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.10",
)
use_repo(python, hermetic_python = "python_3_10")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.10",
    requirements_darwin = "@//dev:macos-requirements.txt",
    requirements_linux = "@//dev:linux-requirements.txt",
    requirements_windows = "@//dev:windows-requirements.txt",
)
use_repo(pip, pip_deps = "pip")

# Go-specific dependencies
go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.module(
    path = "github.com/bazelbuild/buildtools",
    sum = "h1:skvX7icFzwe3yKdg2wZALO+aLAYs13Qua1v2iZPo2HE=",
    version = "v0.0.0-20230825120932-b163fcf72b7d",
)
go_deps.module(
    path = "github.com/google/go-cmp",
    sum = "h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=",
    version = "v0.5.6",
)
use_repo(go_deps, "com_github_bazelbuild_buildtools", "com_github_google_go_cmp")

# We want to test the external example without adding its repository to the
# registry.  So we use a fake dependency and override it immediately locally.
bazel_dep(name = "fmt", version = "10.1.0", dev_dependency = True, repo_name = "example")

local_path_override(
    module_name = "fmt",
    path = "examples/ext",
)
