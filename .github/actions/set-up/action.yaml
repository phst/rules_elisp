# Copyright 2021, 2022, 2023, 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Set up Bazel workspace
description: Install necessary dependencies and load remote caches

inputs:
  bazel-version:
    description: Bazel version to use
    required: true
  github-token:
    description: GitHub authentication token from secrets.GITHUB_TOKEN
    required: true

runs:
  using: composite
  steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install APT packages
      shell: bash
      run: sudo apt-get update && sudo apt-get install libxml2-utils
      if: runner.os == 'Linux'
    - name: Install Homebrew packages
      # The Protocol Buffer rules need ‘realpath’ from the GNU coreutils.
      shell: bash
      run: brew update && brew install coreutils
      if: runner.os == 'macOS'
    - name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: false
        release: false
        # See nt/INSTALL.W64 for the list of required MSYS2 packages
        install: >
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-xpm-nox
      if: runner.os == 'Windows'
    - name: Set up MSYS2 environment
      # Make Bazel find the right binaries on GitHub.  See
      # https://bazel.build/install/windows#bazel_does_not_find_bash_or_bashexe.
      shell: cmd
      run: |
        ECHO BAZEL_SH=C:\MSYS64\usr\bin\bash.exe>> %GITHUB_ENV%
      if: runner.os == 'Windows'
    - name: Create output base
      # Work around https://github.com/protocolbuffers/protobuf/issues/12947.
      # See https://bazel.build/configure/windows#long-path-issues.
      # Note that the .bazelrc parser treats backslashes as escape characters,
      # so we have to escape them.
      shell: cmd
      run: >
        MKDIR %RUNNER_TEMP%\output-base
        && SUBST O: %RUNNER_TEMP%\output-base
        && ECHO startup --output_base='O:\\'>> github.bazelrc
      if: runner.os == 'Windows'
    - name: Cache Bazel repositories
      uses: actions/cache@v4
      with:
        path: ${{runner.temp}}/bazel-repository-cache
        key: bazel-repositories-${{hashFiles('**/WORKSPACE', '**.bzl')}}
        restore-keys: |
          bazel-repositories-
    - name: Cache Bazel results
      # Use disk cache to speed up runs.
      uses: actions/cache@v4
      with:
        path: ${{runner.temp}}/bazel-action-cache
        key: bazel-actions-${{runner.os}}-${{inputs.bazel-version}}-${{hashFiles('**')}}
        restore-keys: |
          bazel-actions-${{runner.os}}-${{inputs.bazel-version}}-
          bazel-actions-${{runner.os}}-
    - name: Set up .bazelrc
      shell: bash
      # The .bazelrc parser treats backslashes as escape characters, so replace
      # them with forward slashes, which also works on Windows.
      run: |
        tr '\\' '/' >> github.bazelrc <<'EOF'
        common --announce_rc
        common --show_progress_rate_limit=10
        common --repository_cache='${{runner.temp}}/bazel-repository-cache'
        common --disk_cache='${{runner.temp}}/bazel-action-cache'
        build --verbose_failures
        build --experimental_convenience_symlinks=ignore
        build --show_result=0
        build --nostamp
        test --test_output=errors
        EOF
    - name: Set up environment
      # BAZELISK_GITHUB_TOKEN: See
      # https://github.com/bazelbuild/bazelisk/issues/88#issuecomment-625178467.
      #
      # BAZEL_USE_CPP_ONLY_TOOLCHAIN: We don’t need XCode, and using the Unix
      # toolchain tends to be less flaky.  See
      # https://github.com/bazelbuild/bazel/issues/14113#issuecomment-999794586.
      # Use the Unix toolchain only on Github to make coverage generation work
      # locally; see https://github.com/bazelbuild/bazel/issues/14970.
      shell: bash
      run: |
        cat >> "${GITHUB_ENV:?}" <<'EOF'
        USE_BAZEL_VERSION=${{inputs.bazel-version}}
        BAZELISK_GITHUB_TOKEN=${{inputs.github-token}}
        BAZEL_USE_CPP_ONLY_TOOLCHAIN=1
        EOF
