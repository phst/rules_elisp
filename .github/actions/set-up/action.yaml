# Copyright 2021, 2022, 2023, 2024, 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Set up Bazel workspace
description: Install necessary dependencies and load remote caches

inputs:
  bazel-version:
    description: Bazel version to use
    required: true
  cc:
    description: C/C++ compiler to use
    required: false
    default: >-
      ${{
      runner.os == 'Linux' && 'gcc'
      || (runner.os == 'macOS' && 'clang' || 'msvc')
      }}

runs:
  using: composite
  steps:
    - name: Install APT packages
      shell: bash
      run: sudo apt-get update && sudo apt-get install libxml2-utils
      if: runner.os == 'Linux'
    - id: msys2
      name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: false
        release: false
        install: >
          texinfo
      if: runner.os == 'Windows'
    - name: Install Texinfo
      shell: bash
      run: brew update && brew install texinfo
      if: runner.os == 'macOS'
    - name: Set up Bazel
      uses: bazel-contrib/setup-bazel@0.15.0
      with:
        # The lockfile format differs between the Bazel versions, so only for
        # one version --lockfile_mode=error can work.  --lockfile_mode=update
        # would be useless since we never use the updated lockfiles, so switch
        # lockfiles off entirely in other Bazel versions.
        # --incompatible_enforce_starlark_utf8 was added in Bazel 8.1.
        # FIXME: Add it to the project’s .bazelrc once we drop support for
        # Bazel 8.0 and below.
        # See https://bazel.build/configure/windows#clang for how to configure
        # Bazel to use Clang on Windows.
        bazelrc: |
          common --announce_rc
          common --show_progress_rate_limit=10
          common --remote_download_minimal
          common --incompatible_config_setting_private_default_visibility
          common --lockfile_mode=${{inputs.bazel-version == 'latest' && 'error' || 'off'}}
          build --verbose_failures
          build --experimental_convenience_symlinks=ignore
          build --show_result=0
          build --nostamp
          build --experimental_repository_cache_hardlinks
          test --test_output=errors
          ${{
            inputs.bazel-version == 'latest' &&
            'common --incompatible_enforce_starlark_utf8=error'
          }}
          ${{
            runner.os == 'macOS' && startsWith(inputs.cc, 'gcc') &&
            'common --config=macos-gcc'
          }}
          ${{
            runner.os == 'Windows' && inputs.cc == 'clang' &&
            'build --config=clang-cl'
          }}
        # Use disk cache to speed up runs.
        disk-cache: ${{inputs.bazel-version}}-${{inputs.cc}}
        repository-cache: true
    - name: Configure system (Windows)
      # Make Bazel find the right binaries on GitHub.  See
      # https://bazel.build/install/windows#bazel_does_not_find_bash_or_bashexe.
      shell: pwsh
      run: >-
        Add-Content
        -Verbose
        -LiteralPath $Env:GITHUB_ENV
        -Value 'BAZEL_SH=${{steps.msys2.outputs.msys2-location}}\usr\bin\bash.exe'
      if: runner.os == 'Windows'
    - name: Configure system (all platforms)
      shell: pwsh
      run: |
        $PSNativeCommandUseErrorActionPreference = $true
        # BAZEL_USE_CPP_ONLY_TOOLCHAIN: We don’t need XCode, and using the Unix
        # toolchain tends to be less flaky.  See
        # https://github.com/bazelbuild/bazel/issues/14113#issuecomment-999794586.
        # Use the Unix toolchain only on Github to make coverage generation work
        # locally; see https://github.com/bazelbuild/bazel/issues/14970.
        Add-Content -Verbose -LiteralPath $Env:GITHUB_ENV -Value @(
          'USE_BAZEL_VERSION=${{inputs.bazel-version}}',
          'BAZEL_USE_CPP_ONLY_TOOLCHAIN=1',
          'CC=${{inputs.cc}}'
        )
        # If we don’t have consistent line endings across the operating systems,
        # the MODULE.bazel.lock hashes will diverge for external repositories
        # using git_override.
        git config --global core.autocrlf false
        git config --global core.eol lf
